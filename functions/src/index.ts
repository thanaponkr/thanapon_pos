import {onSchedule} from "firebase-functions/v2/scheduler";
import * as logger from "firebase-functions/logger";
import * as admin from "firebase-admin";
import axios from "axios";

// Initialize Firebase Admin
admin.initializeApp();
const db = admin.firestore();

// !! Important: Edit these 2 lines !!
const LINE_CHANNEL_ACCESS_TOKEN = "d8kCZCQlurCf9/ofYn8rQBnR+vEDPnRFvEhnLHFNKNFeQYDjWVfGmSb16kQwTZKfY6H6Pr6aYyMjP71wcsXnfUCxCIRTfe7mfOkRzxsmXYblDFWO7YfH+i8GoHqAUVEH7gsf/RVaPGBn4dL3YihlUgdB04t89/1O/w1cDnyilFU=";
const YOUR_LINE_USER_ID = "U0f64e4fcee474034365e8b733721f6e0";

interface CartItem {
  name: string;
  quantity: number;
}

export const dailySalesReport = onSchedule(
  {
    schedule: "every day 23:30", // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    timeZone: "Asia/Bangkok",
  },
  async (event) => {
    logger.info("Starting daily sales report function...");

    const now = new Date();
    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
    const endOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);

    const ordersRef = db.collection("orders");
    const query = ordersRef
      .where("createdAt", ">=", startOfToday)
      .where("createdAt", "<=", endOfToday);
    
    const snapshot = await query.get();

    let message = `üîî ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏∏‡πä‡∏õ‡∏±‡πà‡∏ô‡∏õ‡∏≠‡∏Å\n‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${now.toLocaleDateString("th-TH")}\n\n`;

    if (snapshot.empty) {
      message += "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö";
    } else {
      let totalSales = 0;
      // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
      const productSummary: { [key: string]: number } = {};

      snapshot.forEach((doc) => {
        const orderData = doc.data();
        totalSales += orderData.totalPrice;

        // --- ‡∏ß‡∏¥‡πà‡∏á‡πÑ‡∏•‡πà‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏¥‡∏• ---
        if (orderData.items && Array.isArray(orderData.items)) {
          orderData.items.forEach((item: CartItem) => {
            if (productSummary[item.name]) {
              productSummary[item.name] += item.quantity;
            } else {
              productSummary[item.name] = item.quantity;
            }
          });
        }
      });
      
      const orderCount = snapshot.size;

      message += `üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: ${totalSales.toLocaleString()} ‡∏ö‡∏≤‡∏ó\nüßæ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏•: ${orderCount} ‡∏ö‡∏¥‡∏•\n\n`;
      message += "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ:\n";

      // --- ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ---
      for (const [name, quantity] of Object.entries(productSummary)) {
        message += `- ${name}: ${quantity} ‡πÅ‡∏Å‡πâ‡∏ß\n`;
      }
    }

    // --- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE ---
    try {
      await axios.post(
        "https://api.line.me/v2/bot/message/push",
        {
          to: YOUR_LINE_USER_ID,
          messages: [{ type: "text", text: message }],
        },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
          },
        }
      );
      logger.info("Successfully sent LINE message!");
    } catch (error) {
      logger.error("Error sending LINE message:", error);
    }
  }
);